{"ast":null,"code":"import io from 'socket.io-client';\nexport default {\n  name: 'VideoMonitor',\n  data() {\n    return {\n      socket: null,\n      responseMessage: '',\n      selectedRooms: []\n    };\n  },\n  mounted() {\n    this.initializeSocket();\n  },\n  methods: {\n    initializeSocket() {\n      this.socket = io('http://localhost:9000', {\n        transports: ['websocket', 'polling'],\n        withCredentials: true\n      });\n      this.socket.on('connect', () => {\n        console.log('Connected to server');\n      });\n      this.socket.on('video_frame', data => {\n        console.log('Received video frame:', data);\n        this.displayVideoFrame(data);\n      });\n    },\n    displayVideoFrame(data) {\n      const canvasId = `video-${data.camera_id}`;\n      const canvas = document.getElementById(canvasId);\n      if (!canvas) return;\n      const ctx = canvas.getContext('2d');\n\n      // Convert Base64 image to Image object\n      const image = new Image();\n      image.onload = function () {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      };\n      image.src = `data:image/jpeg;base64,${data.image}`;\n    },\n    handleChangeRoom(newRooms) {\n      // Handle room change, stop/start recognition as needed\n      this.stopRecognition();\n      this.startRecognition(newRooms);\n    },\n    startRecognition(rooms) {\n      rooms.forEach(room => {\n        // Start recognition for each room (if needed)\n        // For demonstration purposes, this function can be left empty\n      });\n    },\n    stopRecognition() {\n      // Stop recognition for all rooms (if needed)\n      // For demonstration purposes, this function can be left empty\n    }\n  },\n  beforeDestroy() {\n    // Disconnect socket before component is destroyed\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["io","name","data","socket","responseMessage","selectedRooms","mounted","initializeSocket","methods","transports","withCredentials","on","console","log","displayVideoFrame","canvasId","camera_id","canvas","document","getElementById","ctx","getContext","image","Image","onload","clearRect","width","height","drawImage","src","handleChangeRoom","newRooms","stopRecognition","startRecognition","rooms","forEach","room","beforeDestroy","disconnect"],"sources":["src/views/page/monitor/monitor.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1>监控视频</h1>\r\n    <div id=\"response\">{{ responseMessage }}</div>\r\n    <div class=\"selector\">\r\n      <el-checkbox-group v-model=\"selectedRooms\" @change=\"handleChangeRoom\">\r\n        <el-checkbox label=\"1\">Camera 1</el-checkbox>\r\n        <el-checkbox label=\"2\">Camera 2</el-checkbox>\r\n        <!-- 可以根据需要添加更多摄像头选项 -->\r\n      </el-checkbox-group>\r\n    </div>\r\n    <div class=\"video-container\">\r\n      <canvas v-for=\"room in selectedRooms\" :id=\"`video-${room}`\" :key=\"room\" :alt=\"`Camera ${room} Video Feed`\"></canvas>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport io from 'socket.io-client';\r\n\r\nexport default {\r\n  name: 'VideoMonitor',\r\n  data() {\r\n    return {\r\n      socket: null,\r\n      responseMessage: '',\r\n      selectedRooms: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initializeSocket();\r\n  },\r\n  methods: {\r\n    initializeSocket() {\r\n      this.socket = io('http://localhost:9000', {\r\n        transports: ['websocket', 'polling'],\r\n        withCredentials: true,\r\n      });\r\n\r\n      this.socket.on('connect', () => {\r\n        console.log('Connected to server');\r\n      });\r\n\r\n      this.socket.on('video_frame', (data) => {\r\n        console.log('Received video frame:', data);\r\n        this.displayVideoFrame(data);\r\n      });\r\n    },\r\n    displayVideoFrame(data) {\r\n      const canvasId = `video-${data.camera_id}`;\r\n      const canvas = document.getElementById(canvasId);\r\n      if (!canvas) return;\r\n\r\n      const ctx = canvas.getContext('2d');\r\n\r\n      // Convert Base64 image to Image object\r\n      const image = new Image();\r\n      image.onload = function() {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n      };\r\n      image.src = `data:image/jpeg;base64,${data.image}`;\r\n    },\r\n    handleChangeRoom(newRooms) {\r\n      // Handle room change, stop/start recognition as needed\r\n      this.stopRecognition();\r\n      this.startRecognition(newRooms);\r\n    },\r\n    startRecognition(rooms) {\r\n      rooms.forEach(room => {\r\n        // Start recognition for each room (if needed)\r\n        // For demonstration purposes, this function can be left empty\r\n      });\r\n    },\r\n    stopRecognition() {\r\n      // Stop recognition for all rooms (if needed)\r\n      // For demonstration purposes, this function can be left empty\r\n    },\r\n  },\r\n  beforeDestroy() {\r\n    // Disconnect socket before component is destroyed\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  text-align: center;\r\n  margin-top: 50px;\r\n}\r\n\r\nh1 {\r\n  font-size: 2em;\r\n  color: #333;\r\n}\r\n\r\n.selector {\r\n  margin: 20px 0;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n#response {\r\n  margin: 20px 0;\r\n  font-size: 1.2em;\r\n  color: #666;\r\n}\r\n\r\n.video-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  border: 2px solid #ddd;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\ncanvas {\r\n  max-width: 100%;\r\n  height: auto;\r\n  border-radius: 10px;\r\n}\r\n</style>\r\n"],"mappings":"AAkBA,OAAAA,EAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,eAAA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;EACA;EACAC,OAAA;IACAD,iBAAA;MACA,KAAAJ,MAAA,GAAAH,EAAA;QACAS,UAAA;QACAC,eAAA;MACA;MAEA,KAAAP,MAAA,CAAAQ,EAAA;QACAC,OAAA,CAAAC,GAAA;MACA;MAEA,KAAAV,MAAA,CAAAQ,EAAA,gBAAAT,IAAA;QACAU,OAAA,CAAAC,GAAA,0BAAAX,IAAA;QACA,KAAAY,iBAAA,CAAAZ,IAAA;MACA;IACA;IACAY,kBAAAZ,IAAA;MACA,MAAAa,QAAA,YAAAb,IAAA,CAAAc,SAAA;MACA,MAAAC,MAAA,GAAAC,QAAA,CAAAC,cAAA,CAAAJ,QAAA;MACA,KAAAE,MAAA;MAEA,MAAAG,GAAA,GAAAH,MAAA,CAAAI,UAAA;;MAEA;MACA,MAAAC,KAAA,OAAAC,KAAA;MACAD,KAAA,CAAAE,MAAA;QACAJ,GAAA,CAAAK,SAAA,OAAAR,MAAA,CAAAS,KAAA,EAAAT,MAAA,CAAAU,MAAA;QACAP,GAAA,CAAAQ,SAAA,CAAAN,KAAA,QAAAL,MAAA,CAAAS,KAAA,EAAAT,MAAA,CAAAU,MAAA;MACA;MACAL,KAAA,CAAAO,GAAA,6BAAA3B,IAAA,CAAAoB,KAAA;IACA;IACAQ,iBAAAC,QAAA;MACA;MACA,KAAAC,eAAA;MACA,KAAAC,gBAAA,CAAAF,QAAA;IACA;IACAE,iBAAAC,KAAA;MACAA,KAAA,CAAAC,OAAA,CAAAC,IAAA;QACA;QACA;MAAA,CACA;IACA;IACAJ,gBAAA;MACA;MACA;IAAA;EAEA;EACAK,cAAA;IACA;IACA,SAAAlC,MAAA;MACA,KAAAA,MAAA,CAAAmC,UAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}