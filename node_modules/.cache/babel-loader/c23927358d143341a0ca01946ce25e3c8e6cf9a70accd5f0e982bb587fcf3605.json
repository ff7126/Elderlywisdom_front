{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport io from 'socket.io-client';\nexport default {\n  name: 'VideoMonitor',\n  data() {\n    return {\n      socket: null,\n      responseMessage: ''\n    };\n  },\n  mounted() {\n    this.initializeSocket();\n  },\n  methods: {\n    initializeSocket() {\n      console.log('Initializing socket connection...');\n      this.socket = io('http://xiao.free.idcfengye.com', {\n        transports: ['websocket', 'polling'],\n        withCredentials: true\n      });\n      this.socket.on('connect', () => {\n        console.log('Connected to server');\n      });\n      this.socket.on('video_frame', data => {\n        console.log('Received video frame:', data);\n        this.displayVideoFrame(data);\n      });\n      this.socket.on('disconnect', () => {\n        console.log('Disconnected from server');\n      });\n      this.socket.on('error', error => {\n        console.error('Socket error:', error);\n      });\n    },\n    displayVideoFrame(data) {\n      const canvas = document.getElementById('video-canvas');\n      if (!canvas) {\n        console.warn('Canvas element not found');\n        return;\n      }\n      const ctx = canvas.getContext('2d');\n      if (!ctx) {\n        console.error('Failed to get 2D context for canvas:', canvas);\n        return;\n      }\n      const arrayBufferView = new Uint8Array(data.image);\n      const blob = new Blob([arrayBufferView], {\n        type: 'image/jpeg'\n      });\n      const imageUrl = URL.createObjectURL(blob);\n      const image = new Image();\n      image.onload = function () {\n        console.log('Image loaded');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        URL.revokeObjectURL(imageUrl);\n      };\n      image.onerror = function () {\n        console.error('Failed to load image');\n      };\n      image.src = imageUrl;\n    }\n  },\n  beforeDestroy() {\n    // Disconnect socket before component is destroyed\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["io","name","data","socket","responseMessage","mounted","initializeSocket","methods","console","log","transports","withCredentials","on","displayVideoFrame","error","canvas","document","getElementById","warn","ctx","getContext","arrayBufferView","Uint8Array","image","blob","Blob","type","imageUrl","URL","createObjectURL","Image","onload","clearRect","width","height","drawImage","revokeObjectURL","onerror","src","beforeDestroy","disconnect"],"sources":["src/views/page/monitor/monitor.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1>监控视频</h1>\r\n    <div id=\"response\">{{ responseMessage }}</div>\r\n    <div class=\"video-container\">\r\n      <canvas id=\"video-canvas\" :alt=\"`Video Feed`\"></canvas>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport io from 'socket.io-client';\r\n\r\nexport default {\r\n  name: 'VideoMonitor',\r\n  data() {\r\n    return {\r\n      socket: null,\r\n      responseMessage: '',\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initializeSocket();\r\n  },\r\n  methods: {\r\n    initializeSocket() {\r\n      console.log('Initializing socket connection...');\r\n      this.socket = io('http://xiao.free.idcfengye.com', {\r\n        transports: ['websocket', 'polling'],\r\n        withCredentials: true,\r\n      });\r\n\r\n      this.socket.on('connect', () => {\r\n        console.log('Connected to server');\r\n      });\r\n\r\n      this.socket.on('video_frame', (data) => {\r\n        console.log('Received video frame:', data);\r\n        this.displayVideoFrame(data);\r\n      });\r\n\r\n      this.socket.on('disconnect', () => {\r\n        console.log('Disconnected from server');\r\n      });\r\n\r\n      this.socket.on('error', (error) => {\r\n        console.error('Socket error:', error);\r\n      });\r\n    },\r\n\r\n    displayVideoFrame(data) {\r\n      const canvas = document.getElementById('video-canvas');\r\n      if (!canvas) {\r\n        console.warn('Canvas element not found');\r\n        return;\r\n      }\r\n\r\n      const ctx = canvas.getContext('2d');\r\n      if (!ctx) {\r\n        console.error('Failed to get 2D context for canvas:', canvas);\r\n        return;\r\n      }\r\n\r\n      const arrayBufferView = new Uint8Array(data.image);\r\n      const blob = new Blob([arrayBufferView], { type: 'image/jpeg' });\r\n      const imageUrl = URL.createObjectURL(blob);\r\n\r\n      const image = new Image();\r\n      image.onload = function() {\r\n        console.log('Image loaded');\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n        URL.revokeObjectURL(imageUrl);\r\n      };\r\n      image.onerror = function() {\r\n        console.error('Failed to load image');\r\n      };\r\n      image.src = imageUrl;\r\n    },\r\n  },\r\n  beforeDestroy() {\r\n    // Disconnect socket before component is destroyed\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  text-align: center;\r\n  margin-top: 50px;\r\n}\r\n\r\nh1 {\r\n  font-size: 2em;\r\n  color: #333;\r\n}\r\n\r\n#response {\r\n  margin: 20px 0;\r\n  font-size: 1.2em;\r\n  color: #666;\r\n}\r\n\r\n.video-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  border: 2px solid #ddd;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\ncanvas {\r\n  max-width: 100%;\r\n  height: auto;\r\n  border-radius: 10px;\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;;AAWA,OAAAA,EAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,eAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;EACA;EACAC,OAAA;IACAD,iBAAA;MACAE,OAAA,CAAAC,GAAA;MACA,KAAAN,MAAA,GAAAH,EAAA;QACAU,UAAA;QACAC,eAAA;MACA;MAEA,KAAAR,MAAA,CAAAS,EAAA;QACAJ,OAAA,CAAAC,GAAA;MACA;MAEA,KAAAN,MAAA,CAAAS,EAAA,gBAAAV,IAAA;QACAM,OAAA,CAAAC,GAAA,0BAAAP,IAAA;QACA,KAAAW,iBAAA,CAAAX,IAAA;MACA;MAEA,KAAAC,MAAA,CAAAS,EAAA;QACAJ,OAAA,CAAAC,GAAA;MACA;MAEA,KAAAN,MAAA,CAAAS,EAAA,UAAAE,KAAA;QACAN,OAAA,CAAAM,KAAA,kBAAAA,KAAA;MACA;IACA;IAEAD,kBAAAX,IAAA;MACA,MAAAa,MAAA,GAAAC,QAAA,CAAAC,cAAA;MACA,KAAAF,MAAA;QACAP,OAAA,CAAAU,IAAA;QACA;MACA;MAEA,MAAAC,GAAA,GAAAJ,MAAA,CAAAK,UAAA;MACA,KAAAD,GAAA;QACAX,OAAA,CAAAM,KAAA,yCAAAC,MAAA;QACA;MACA;MAEA,MAAAM,eAAA,OAAAC,UAAA,CAAApB,IAAA,CAAAqB,KAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,EAAAJ,eAAA;QAAAK,IAAA;MAAA;MACA,MAAAC,QAAA,GAAAC,GAAA,CAAAC,eAAA,CAAAL,IAAA;MAEA,MAAAD,KAAA,OAAAO,KAAA;MACAP,KAAA,CAAAQ,MAAA;QACAvB,OAAA,CAAAC,GAAA;QACAU,GAAA,CAAAa,SAAA,OAAAjB,MAAA,CAAAkB,KAAA,EAAAlB,MAAA,CAAAmB,MAAA;QACAf,GAAA,CAAAgB,SAAA,CAAAZ,KAAA,QAAAR,MAAA,CAAAkB,KAAA,EAAAlB,MAAA,CAAAmB,MAAA;QACAN,GAAA,CAAAQ,eAAA,CAAAT,QAAA;MACA;MACAJ,KAAA,CAAAc,OAAA;QACA7B,OAAA,CAAAM,KAAA;MACA;MACAS,KAAA,CAAAe,GAAA,GAAAX,QAAA;IACA;EACA;EACAY,cAAA;IACA;IACA,SAAApC,MAAA;MACA,KAAAA,MAAA,CAAAqC,UAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}