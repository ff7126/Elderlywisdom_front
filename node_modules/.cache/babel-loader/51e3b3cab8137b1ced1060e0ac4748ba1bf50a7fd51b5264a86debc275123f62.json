{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport io from 'socket.io-client';\nexport default {\n  name: 'VideoMonitor',\n  data() {\n    return {\n      socket: null,\n      responseMessage: '',\n      selectedRooms: []\n    };\n  },\n  mounted() {\n    this.initializeSocket();\n  },\n  methods: {\n    initializeSocket() {\n      console.log('Initializing socket connection...');\n      this.socket = io('http://xiao.free.idcfengye.com', {\n        transports: ['websocket', 'polling'],\n        withCredentials: true\n      });\n      this.socket.on('connect', () => {\n        console.log('Connected to server');\n      });\n      this.socket.on('video_frame', data => {\n        console.log('Received video frame:', data);\n        this.displayVideoFrame(data);\n      });\n      this.socket.on('disconnect', () => {\n        console.log('Disconnected from server');\n      });\n      this.socket.on('error', error => {\n        console.error('Socket error:', error);\n      });\n    },\n    displayVideoFrame(data) {\n      console.log('Displaying video frame for rooms:', this.selectedRooms);\n      console.log('Received video frame data:', data);\n      this.selectedRooms.forEach(room => {\n        const canvas = document.getElementById(`video-${room}`);\n        if (!canvas) {\n          console.warn(`Canvas not found for room ${room}`);\n          return;\n        }\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n          console.error('Failed to get 2D context for canvas:', canvas);\n          return;\n        }\n        const arrayBufferView = new Uint8Array(data.image);\n        const blob = new Blob([arrayBufferView], {\n          type: 'image/jpeg'\n        });\n        const imageUrl = URL.createObjectURL(blob);\n        const image = new Image();\n        image.onload = function () {\n          console.log(`Image loaded for room ${room}`);\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n          URL.revokeObjectURL(imageUrl);\n        };\n        image.onerror = function () {\n          console.error(`Failed to load image for room ${room}`);\n        };\n        image.src = imageUrl;\n      });\n    },\n    handleChangeRoom(newRooms) {\n      // Handle room change, stop/start recognition as needed\n      this.stopRecognition();\n      this.startRecognition(newRooms);\n    },\n    startRecognition(rooms) {\n      rooms.forEach(room => {\n        // Start recognition for each room (if needed)\n        // For demonstration purposes, this function can be left empty\n      });\n    },\n    stopRecognition() {\n      // Stop recognition for all rooms (if needed)\n      // For demonstration purposes, this function can be left empty\n    }\n  },\n  beforeDestroy() {\n    // Disconnect socket before component is destroyed\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["io","name","data","socket","responseMessage","selectedRooms","mounted","initializeSocket","methods","console","log","transports","withCredentials","on","displayVideoFrame","error","forEach","room","canvas","document","getElementById","warn","ctx","getContext","arrayBufferView","Uint8Array","image","blob","Blob","type","imageUrl","URL","createObjectURL","Image","onload","clearRect","width","height","drawImage","revokeObjectURL","onerror","src","handleChangeRoom","newRooms","stopRecognition","startRecognition","rooms","beforeDestroy","disconnect"],"sources":["src/views/page/monitor/monitor.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1>监控视频</h1>\r\n    <div id=\"response\">{{ responseMessage }}</div>\r\n    <div class=\"selector\">\r\n      <el-checkbox-group v-model=\"selectedRooms\" @change=\"handleChangeRoom\">\r\n        <el-checkbox label=\"1\">Camera 1</el-checkbox>\r\n        <el-checkbox label=\"2\">Camera 2</el-checkbox>\r\n        <!-- 可以根据需要添加更多摄像头选项 -->\r\n      </el-checkbox-group>\r\n    </div>\r\n    <div class=\"video-container\">\r\n      <canvas v-for=\"room in selectedRooms\" :id=\"`video-${room}`\" :key=\"room\" :alt=\"`Camera ${room} Video Feed`\"></canvas>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport io from 'socket.io-client';\r\n\r\nexport default {\r\n  name: 'VideoMonitor',\r\n  data() {\r\n    return {\r\n      socket: null,\r\n      responseMessage: '',\r\n      selectedRooms: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initializeSocket();\r\n  },\r\n  methods: {\r\n    initializeSocket() {\r\n      console.log('Initializing socket connection...');\r\n      this.socket = io('http://xiao.free.idcfengye.com', {\r\n        transports: ['websocket', 'polling'],\r\n        withCredentials: true,\r\n      });\r\n\r\n      this.socket.on('connect', () => {\r\n        console.log('Connected to server');\r\n      });\r\n\r\n      this.socket.on('video_frame', (data) => {\r\n        console.log('Received video frame:', data);\r\n        this.displayVideoFrame(data);\r\n      });\r\n\r\n      this.socket.on('disconnect', () => {\r\n        console.log('Disconnected from server');\r\n      });\r\n\r\n      this.socket.on('error', (error) => {\r\n        console.error('Socket error:', error);\r\n      });\r\n    },\r\n\r\n    displayVideoFrame(data) {\r\n      console.log('Displaying video frame for rooms:', this.selectedRooms);\r\n      console.log('Received video frame data:', data);\r\n\r\n      this.selectedRooms.forEach(room => {\r\n        const canvas = document.getElementById(`video-${room}`);\r\n        if (!canvas) {\r\n          console.warn(`Canvas not found for room ${room}`);\r\n          return;\r\n        }\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) {\r\n          console.error('Failed to get 2D context for canvas:', canvas);\r\n          return;\r\n        }\r\n\r\n        const arrayBufferView = new Uint8Array(data.image);\r\n        const blob = new Blob([arrayBufferView], { type: 'image/jpeg' });\r\n        const imageUrl = URL.createObjectURL(blob);\r\n\r\n        const image = new Image();\r\n        image.onload = function() {\r\n          console.log(`Image loaded for room ${room}`);\r\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n          ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n          URL.revokeObjectURL(imageUrl);\r\n        };\r\n        image.onerror = function() {\r\n          console.error(`Failed to load image for room ${room}`);\r\n        };\r\n        image.src = imageUrl;\r\n      });\r\n    },\r\n\r\n    handleChangeRoom(newRooms) {\r\n      // Handle room change, stop/start recognition as needed\r\n      this.stopRecognition();\r\n      this.startRecognition(newRooms);\r\n    },\r\n    startRecognition(rooms) {\r\n      rooms.forEach(room => {\r\n        // Start recognition for each room (if needed)\r\n        // For demonstration purposes, this function can be left empty\r\n      });\r\n    },\r\n    stopRecognition() {\r\n      // Stop recognition for all rooms (if needed)\r\n      // For demonstration purposes, this function can be left empty\r\n    },\r\n  },\r\n  beforeDestroy() {\r\n    // Disconnect socket before component is destroyed\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  text-align: center;\r\n  margin-top: 50px;\r\n}\r\n\r\nh1 {\r\n  font-size: 2em;\r\n  color: #333;\r\n}\r\n\r\n.selector {\r\n  margin: 20px 0;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n#response {\r\n  margin: 20px 0;\r\n  font-size: 1.2em;\r\n  color: #666;\r\n}\r\n\r\n.video-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  border: 2px solid #ddd;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\ncanvas {\r\n  max-width: 100%;\r\n  height: auto;\r\n  border-radius: 10px;\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;;AAkBA,OAAAA,EAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,eAAA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;EACA;EACAC,OAAA;IACAD,iBAAA;MACAE,OAAA,CAAAC,GAAA;MACA,KAAAP,MAAA,GAAAH,EAAA;QACAW,UAAA;QACAC,eAAA;MACA;MAEA,KAAAT,MAAA,CAAAU,EAAA;QACAJ,OAAA,CAAAC,GAAA;MACA;MAEA,KAAAP,MAAA,CAAAU,EAAA,gBAAAX,IAAA;QACAO,OAAA,CAAAC,GAAA,0BAAAR,IAAA;QACA,KAAAY,iBAAA,CAAAZ,IAAA;MACA;MAEA,KAAAC,MAAA,CAAAU,EAAA;QACAJ,OAAA,CAAAC,GAAA;MACA;MAEA,KAAAP,MAAA,CAAAU,EAAA,UAAAE,KAAA;QACAN,OAAA,CAAAM,KAAA,kBAAAA,KAAA;MACA;IACA;IAEAD,kBAAAZ,IAAA;MACAO,OAAA,CAAAC,GAAA,2CAAAL,aAAA;MACAI,OAAA,CAAAC,GAAA,+BAAAR,IAAA;MAEA,KAAAG,aAAA,CAAAW,OAAA,CAAAC,IAAA;QACA,MAAAC,MAAA,GAAAC,QAAA,CAAAC,cAAA,UAAAH,IAAA;QACA,KAAAC,MAAA;UACAT,OAAA,CAAAY,IAAA,8BAAAJ,IAAA;UACA;QACA;QAEA,MAAAK,GAAA,GAAAJ,MAAA,CAAAK,UAAA;QACA,KAAAD,GAAA;UACAb,OAAA,CAAAM,KAAA,yCAAAG,MAAA;UACA;QACA;QAEA,MAAAM,eAAA,OAAAC,UAAA,CAAAvB,IAAA,CAAAwB,KAAA;QACA,MAAAC,IAAA,OAAAC,IAAA,EAAAJ,eAAA;UAAAK,IAAA;QAAA;QACA,MAAAC,QAAA,GAAAC,GAAA,CAAAC,eAAA,CAAAL,IAAA;QAEA,MAAAD,KAAA,OAAAO,KAAA;QACAP,KAAA,CAAAQ,MAAA;UACAzB,OAAA,CAAAC,GAAA,0BAAAO,IAAA;UACAK,GAAA,CAAAa,SAAA,OAAAjB,MAAA,CAAAkB,KAAA,EAAAlB,MAAA,CAAAmB,MAAA;UACAf,GAAA,CAAAgB,SAAA,CAAAZ,KAAA,QAAAR,MAAA,CAAAkB,KAAA,EAAAlB,MAAA,CAAAmB,MAAA;UACAN,GAAA,CAAAQ,eAAA,CAAAT,QAAA;QACA;QACAJ,KAAA,CAAAc,OAAA;UACA/B,OAAA,CAAAM,KAAA,kCAAAE,IAAA;QACA;QACAS,KAAA,CAAAe,GAAA,GAAAX,QAAA;MACA;IACA;IAEAY,iBAAAC,QAAA;MACA;MACA,KAAAC,eAAA;MACA,KAAAC,gBAAA,CAAAF,QAAA;IACA;IACAE,iBAAAC,KAAA;MACAA,KAAA,CAAA9B,OAAA,CAAAC,IAAA;QACA;QACA;MAAA,CACA;IACA;IACA2B,gBAAA;MACA;MACA;IAAA;EAEA;EACAG,cAAA;IACA;IACA,SAAA5C,MAAA;MACA,KAAAA,MAAA,CAAA6C,UAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}