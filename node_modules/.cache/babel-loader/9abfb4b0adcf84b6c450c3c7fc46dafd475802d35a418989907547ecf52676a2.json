{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { MessageBox, Message } from 'element-ui';\nimport store from '@/store';\nimport router from '../router/index';\nconst token = localStorage.getItem(\"token\");\nconst request = axios.create({\n  baseURL: 'https://615127d40k.zicp.fun',\n  timeout: 5000,\n  headers: {\n    'Authorization': \"Bearer \" + token\n  }\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  // config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n  // config.headers['token'] = user.token;  // 设置请求头\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  //判断response状态\n  if (!res.code) Message.error('请求错误: ' + res.msg);\n  if (res.code === 403) router.push(\"/403\");\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","MessageBox","Message","store","router","token","localStorage","getItem","request","create","baseURL","timeout","headers","interceptors","use","config","error","Promise","reject","response","res","data","JSON","parse","code","msg","push","console","log"],"sources":["D:/frontEnd/Elderly_care_system_front_end/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { MessageBox, Message } from 'element-ui'\r\nimport store from '@/store'\r\nimport router from '../router/index'\r\nconst token = localStorage.getItem(\"token\")\r\n\r\nconst request = axios.create({\r\n    baseURL: 'https://615127d40k.zicp.fun',\r\n    timeout: 5000,\r\n    headers: {'Authorization': \"Bearer \"+token}\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    // config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n    // config.headers['token'] = user.token;  // 设置请求头\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        //判断response状态\r\n        if (!res.code) Message.error('请求错误: ' + res.msg)\r\n\r\n        if (res.code === 403) router.push(\"/403\")\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,EAAEC,OAAO,QAAQ,YAAY;AAChD,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,iBAAiB;AACpC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AAE3C,MAAMC,OAAO,GAAGR,KAAK,CAACS,MAAM,CAAC;EACzBC,OAAO,EAAE,6BAA6B;EACtCC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IAAC,eAAe,EAAE,SAAS,GAACP;EAAK;AAC9C,CAAC,CAAC;;AAEF;AACA;AACA;AACAG,OAAO,CAACK,YAAY,CAACL,OAAO,CAACM,GAAG,CAACC,MAAM,IAAI;EACvC;;EAEA;EACA,OAAOA,MAAM;AACjB,CAAC,EAAEC,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAR,OAAO,CAACK,YAAY,CAACM,QAAQ,CAACL,GAAG,CAC7BK,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB;EACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGE,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA;EACA,IAAI,CAACA,GAAG,CAACI,IAAI,EAAEtB,OAAO,CAACc,KAAK,CAAC,QAAQ,GAAGI,GAAG,CAACK,GAAG,CAAC;EAEhD,IAAIL,GAAG,CAACI,IAAI,KAAK,GAAG,EAAEpB,MAAM,CAACsB,IAAI,CAAC,MAAM,CAAC;EACzC,OAAON,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLW,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGZ,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,eAAeR,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}