{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport axios from 'axios';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  name: 'GenderDistribution',\n  data() {\n    return {\n      employeeList: [],\n      genderDistribution: null\n    };\n  },\n  mounted() {\n    this.fetchEmployeeData();\n  },\n  methods: {\n    fetchEmployeeData() {\n      axios.get('http://192.168.57.26:5001/api/employee/all').then(response => {\n        if (response.data.code === 0 && Array.isArray(response.data.data)) {\n          this.employeeList = response.data.data;\n          this.calculateGenderDistribution();\n          this.renderPieChart();\n          this.renderBarChart();\n        } else {\n          throw new Error('Invalid data format or API error status');\n        }\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n      });\n    },\n    calculateGenderDistribution() {\n      const genderCounts = {\n        'Male': 0,\n        'Female': 0\n      };\n      this.employeeList.forEach(employee => {\n        genderCounts[employee.gender] = (genderCounts[employee.gender] || 0) + 1;\n      });\n      this.genderDistribution = genderCounts;\n    },\n    renderPieChart() {\n      const ctx = this.$refs.pieChart.getContext('2d');\n      new Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: Object.keys(this.genderDistribution),\n          datasets: [{\n            data: Object.values(this.genderDistribution),\n            backgroundColor: ['rgba(54, 162, 235, 0.6)', 'rgba(255, 99, 132, 0.6)'],\n            borderColor: ['rgba(54, 162, 235, 1)', 'rgba(255, 99, 132, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: '性别分布 - 饼图',\n              font: {\n                size: 16\n              }\n            }\n          }\n        }\n      });\n    },\n    renderBarChart() {\n      const ctx = this.$refs.barChart.getContext('2d');\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: Object.keys(this.genderDistribution),\n          datasets: [{\n            label: '人数',\n            data: Object.values(this.genderDistribution),\n            backgroundColor: ['rgba(54, 162, 235, 0.6)', 'rgba(255, 99, 132, 0.6)'],\n            borderColor: ['rgba(54, 162, 235, 1)', 'rgba(255, 99, 132, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: false\n            },\n            title: {\n              display: true,\n              text: '性别分布 - 条形图',\n              font: {\n                size: 16\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","Chart","registerables","register","name","data","employeeList","genderDistribution","mounted","fetchEmployeeData","methods","get","then","response","code","Array","isArray","calculateGenderDistribution","renderPieChart","renderBarChart","Error","catch","error","console","genderCounts","forEach","employee","gender","ctx","$refs","pieChart","getContext","type","labels","Object","keys","datasets","values","backgroundColor","borderColor","borderWidth","options","responsive","plugins","legend","position","title","display","text","font","size","barChart","label","scales","y","beginAtZero"],"sources":["src/views/page/work/AgeDistribution.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h2 class=\"title\">工作人员性别分布</h2>\r\n    <div class=\"gender-info\" v-if=\"genderDistribution\">\r\n      <span v-for=\"(count, gender) in genderDistribution\" :key=\"gender\">\r\n        {{ gender }}: {{ count }}人\r\n      </span>\r\n    </div>\r\n    <div class=\"charts-container\">\r\n      <div class=\"chart-container pie-chart\">\r\n        <canvas ref=\"pieChart\"></canvas>\r\n      </div>\r\n      <div class=\"chart-container bar-chart\">\r\n        <canvas ref=\"barChart\"></canvas>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { Chart, registerables } from 'chart.js';\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n  name: 'GenderDistribution',\r\n  data() {\r\n    return {\r\n      employeeList: [],\r\n      genderDistribution: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchEmployeeData();\r\n  },\r\n  methods: {\r\n    fetchEmployeeData() {\r\n      axios.get('http://192.168.57.26:5001/api/employee/all')\r\n          .then(response => {\r\n            if (response.data.code === 0 && Array.isArray(response.data.data)) {\r\n              this.employeeList = response.data.data;\r\n              this.calculateGenderDistribution();\r\n              this.renderPieChart();\r\n              this.renderBarChart();\r\n            } else {\r\n              throw new Error('Invalid data format or API error status');\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching data:', error);\r\n          });\r\n    },\r\n    calculateGenderDistribution() {\r\n      const genderCounts = { 'Male': 0, 'Female': 0 };\r\n      this.employeeList.forEach(employee => {\r\n        genderCounts[employee.gender] = (genderCounts[employee.gender] || 0) + 1;\r\n      });\r\n      this.genderDistribution = genderCounts;\r\n    },\r\n    renderPieChart() {\r\n      const ctx = this.$refs.pieChart.getContext('2d');\r\n      new Chart(ctx, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: Object.keys(this.genderDistribution),\r\n          datasets: [{\r\n            data: Object.values(this.genderDistribution),\r\n            backgroundColor: [\r\n              'rgba(54, 162, 235, 0.6)',\r\n              'rgba(255, 99, 132, 0.6)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(54, 162, 235, 1)',\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: '性别分布 - 饼图',\r\n              font: {\r\n                size: 16\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n    renderBarChart() {\r\n      const ctx = this.$refs.barChart.getContext('2d');\r\n      new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: Object.keys(this.genderDistribution),\r\n          datasets: [{\r\n            label: '人数',\r\n            data: Object.values(this.genderDistribution),\r\n            backgroundColor: [\r\n              'rgba(54, 162, 235, 0.6)',\r\n              'rgba(255, 99, 132, 0.6)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(54, 162, 235, 1)',\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          plugins: {\r\n            legend: {\r\n              display: false\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: '性别分布 - 条形图',\r\n              font: {\r\n                size: 16\r\n              }\r\n            }\r\n          },\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  text-align: center;\r\n  width: 100%;\r\n}\r\n\r\n.title {\r\n  margin-top: 20px;\r\n}\r\n\r\n.gender-info {\r\n  margin: 20px 0;\r\n  font-size: 16px;\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 20px;\r\n}\r\n\r\n.charts-container {\r\n  display: flex;\r\n  justify-content: space-around;\r\n}\r\n\r\n.chart-container {\r\n  width: 45%;\r\n  height: 400px;\r\n}\r\n\r\ncanvas {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\r\n"],"mappings":";AAoBA,OAAAA,KAAA;AACA,SAAAC,KAAA,EAAAC,aAAA;AACAD,KAAA,CAAAE,QAAA,IAAAD,aAAA;AAEA;EACAE,IAAA;EACAC,KAAA;IACA;MACAC,YAAA;MACAC,kBAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,iBAAA;EACA;EACAC,OAAA;IACAD,kBAAA;MACAT,KAAA,CAAAW,GAAA,+CACAC,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAR,IAAA,CAAAS,IAAA,UAAAC,KAAA,CAAAC,OAAA,CAAAH,QAAA,CAAAR,IAAA,CAAAA,IAAA;UACA,KAAAC,YAAA,GAAAO,QAAA,CAAAR,IAAA,CAAAA,IAAA;UACA,KAAAY,2BAAA;UACA,KAAAC,cAAA;UACA,KAAAC,cAAA;QACA;UACA,UAAAC,KAAA;QACA;MACA,GACAC,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,yBAAAA,KAAA;MACA;IACA;IACAL,4BAAA;MACA,MAAAO,YAAA;QAAA;QAAA;MAAA;MACA,KAAAlB,YAAA,CAAAmB,OAAA,CAAAC,QAAA;QACAF,YAAA,CAAAE,QAAA,CAAAC,MAAA,KAAAH,YAAA,CAAAE,QAAA,CAAAC,MAAA;MACA;MACA,KAAApB,kBAAA,GAAAiB,YAAA;IACA;IACAN,eAAA;MACA,MAAAU,GAAA,QAAAC,KAAA,CAAAC,QAAA,CAAAC,UAAA;MACA,IAAA9B,KAAA,CAAA2B,GAAA;QACAI,IAAA;QACA3B,IAAA;UACA4B,MAAA,EAAAC,MAAA,CAAAC,IAAA,MAAA5B,kBAAA;UACA6B,QAAA;YACA/B,IAAA,EAAA6B,MAAA,CAAAG,MAAA,MAAA9B,kBAAA;YACA+B,eAAA,GACA,2BACA,0BACA;YACAC,WAAA,GACA,yBACA,wBACA;YACAC,WAAA;UACA;QACA;QACAC,OAAA;UACAC,UAAA;UACAC,OAAA;YACAC,MAAA;cACAC,QAAA;YACA;YACAC,KAAA;cACAC,OAAA;cACAC,IAAA;cACAC,IAAA;gBACAC,IAAA;cACA;YACA;UACA;QACA;MACA;IACA;IACA/B,eAAA;MACA,MAAAS,GAAA,QAAAC,KAAA,CAAAsB,QAAA,CAAApB,UAAA;MACA,IAAA9B,KAAA,CAAA2B,GAAA;QACAI,IAAA;QACA3B,IAAA;UACA4B,MAAA,EAAAC,MAAA,CAAAC,IAAA,MAAA5B,kBAAA;UACA6B,QAAA;YACAgB,KAAA;YACA/C,IAAA,EAAA6B,MAAA,CAAAG,MAAA,MAAA9B,kBAAA;YACA+B,eAAA,GACA,2BACA,0BACA;YACAC,WAAA,GACA,yBACA,wBACA;YACAC,WAAA;UACA;QACA;QACAC,OAAA;UACAC,UAAA;UACAC,OAAA;YACAC,MAAA;cACAG,OAAA;YACA;YACAD,KAAA;cACAC,OAAA;cACAC,IAAA;cACAC,IAAA;gBACAC,IAAA;cACA;YACA;UACA;UACAG,MAAA;YACAC,CAAA;cACAC,WAAA;YACA;UACA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}