{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport io from 'socket.io-client';\nexport default {\n  name: 'VideoMonitor',\n  data() {\n    return {\n      socket: null,\n      responseMessage: '',\n      selectedRooms: []\n    };\n  },\n  mounted() {\n    this.initializeSocket();\n  },\n  methods: {\n    initializeSocket() {\n      this.socket = io('http://xiao.free.idcfengye.com', {\n        transports: ['websocket', 'polling'],\n        withCredentials: true\n      });\n      this.socket.on('connect', () => {\n        console.log('Connected to server');\n      });\n      this.socket.on('video_frame', data => {\n        console.log('Received video frame:', data);\n        this.displayVideoFrame(data);\n      });\n    },\n    displayVideoFrame(data) {\n      this.selectedRooms.forEach(room => {\n        const canvas = document.getElementById(`video-${room}`);\n        const ctx = canvas.getContext('2d');\n\n        // Convert ArrayBuffer to Blob\n        const arrayBufferView = new Uint8Array(data.image);\n        const blob = new Blob([arrayBufferView], {\n          type: 'image/jpeg'\n        });\n\n        // Create Object URL from Blob and draw on canvas\n        const imageUrl = URL.createObjectURL(blob);\n        const image = new Image();\n        image.onload = function () {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n          URL.revokeObjectURL(imageUrl);\n        };\n        image.src = imageUrl;\n      });\n    },\n    handleChangeRoom(newRooms) {\n      // Handle room change, stop/start recognition as needed\n      this.stopRecognition();\n      this.startRecognition(newRooms);\n    },\n    startRecognition(rooms) {\n      rooms.forEach(room => {\n        // Start recognition for each room\n        const apiUrl = `http://xiao.free.idcfengye.com`;\n        fetch(apiUrl, {\n          method: 'POST'\n        }).then(response => response.json()).then(data => {\n          this.responseMessage = data.message;\n          console.log(data.message);\n        }).catch(error => {\n          console.error('Error:', error);\n          this.responseMessage = 'Error starting recognition';\n        });\n      });\n    },\n    stopRecognition() {\n      // Stop recognition for all rooms\n      const apiUrl = `http://xiao.free.idcfengye.com`;\n      fetch(apiUrl, {\n        method: 'POST'\n      }).then(response => response.json()).then(data => {\n        this.responseMessage = data.message;\n        console.log(data.message);\n      }).catch(error => {\n        console.error('Error:', error);\n        this.responseMessage = 'Error stopping recognition';\n      });\n    }\n  },\n  beforeDestroy() {\n    // Disconnect socket before component is destroyed\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["io","name","data","socket","responseMessage","selectedRooms","mounted","initializeSocket","methods","transports","withCredentials","on","console","log","displayVideoFrame","forEach","room","canvas","document","getElementById","ctx","getContext","arrayBufferView","Uint8Array","image","blob","Blob","type","imageUrl","URL","createObjectURL","Image","onload","clearRect","width","height","drawImage","revokeObjectURL","src","handleChangeRoom","newRooms","stopRecognition","startRecognition","rooms","apiUrl","fetch","method","then","response","json","message","catch","error","beforeDestroy","disconnect"],"sources":["src/views/page/monitor/monitor.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1>监控视频</h1>\r\n    <div id=\"response\">{{ responseMessage }}</div>\r\n    <div class=\"selector\">\r\n      <el-checkbox-group v-model=\"selectedRooms\" @change=\"handleChangeRoom\">\r\n        <el-checkbox label=\"101\">101</el-checkbox>\r\n        <el-checkbox label=\"102\">102</el-checkbox>\r\n        <el-checkbox label=\"103\">103</el-checkbox>\r\n        <el-checkbox label=\"104\">104</el-checkbox>\r\n      </el-checkbox-group>\r\n    </div>\r\n    <div class=\"video-container\">\r\n      <canvas v-for=\"room in selectedRooms\" :id=\"`video-${room}`\" :key=\"room\" :alt=\"`Room ${room} Video Feed`\"></canvas>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport io from 'socket.io-client';\r\n\r\nexport default {\r\n  name: 'VideoMonitor',\r\n  data() {\r\n    return {\r\n      socket: null,\r\n      responseMessage: '',\r\n      selectedRooms: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initializeSocket();\r\n  },\r\n  methods: {\r\n    initializeSocket() {\r\n      this.socket = io('http://xiao.free.idcfengye.com', {\r\n        transports: ['websocket', 'polling'],\r\n        withCredentials: true,\r\n      });\r\n\r\n      this.socket.on('connect', () => {\r\n        console.log('Connected to server');\r\n      });\r\n\r\n      this.socket.on('video_frame', (data) => {\r\n        console.log('Received video frame:', data);\r\n        this.displayVideoFrame(data);\r\n      });\r\n    },\r\n    displayVideoFrame(data) {\r\n      this.selectedRooms.forEach(room => {\r\n        const canvas = document.getElementById(`video-${room}`);\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        // Convert ArrayBuffer to Blob\r\n        const arrayBufferView = new Uint8Array(data.image);\r\n        const blob = new Blob([arrayBufferView], {type: 'image/jpeg'});\r\n\r\n        // Create Object URL from Blob and draw on canvas\r\n        const imageUrl = URL.createObjectURL(blob);\r\n        const image = new Image();\r\n        image.onload = function() {\r\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n          ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n          URL.revokeObjectURL(imageUrl);\r\n        };\r\n        image.src = imageUrl;\r\n      });\r\n    },\r\n    handleChangeRoom(newRooms) {\r\n      // Handle room change, stop/start recognition as needed\r\n      this.stopRecognition();\r\n      this.startRecognition(newRooms);\r\n    },\r\n    startRecognition(rooms) {\r\n      rooms.forEach(room => {\r\n        // Start recognition for each room\r\n        const apiUrl = `http://xiao.free.idcfengye.com`;\r\n        fetch(apiUrl, { method: 'POST' })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              this.responseMessage = data.message;\r\n              console.log(data.message);\r\n            })\r\n            .catch(error => {\r\n              console.error('Error:', error);\r\n              this.responseMessage = 'Error starting recognition';\r\n            });\r\n      });\r\n    },\r\n    stopRecognition() {\r\n      // Stop recognition for all rooms\r\n      const apiUrl = `http://xiao.free.idcfengye.com`;\r\n      fetch(apiUrl, { method: 'POST' })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            this.responseMessage = data.message;\r\n            console.log(data.message);\r\n          })\r\n          .catch(error => {\r\n            console.error('Error:', error);\r\n            this.responseMessage = 'Error stopping recognition';\r\n          });\r\n    },\r\n  },\r\n  beforeDestroy() {\r\n    // Disconnect socket before component is destroyed\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  text-align: center;\r\n  margin-top: 50px;\r\n}\r\n\r\nh1 {\r\n  font-size: 2em;\r\n  color: #333;\r\n}\r\n\r\n.selector {\r\n  margin: 20px 0;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n#response {\r\n  margin: 20px 0;\r\n  font-size: 1.2em;\r\n  color: #666;\r\n}\r\n\r\n.video-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  border: 2px solid #ddd;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\ncanvas {\r\n  max-width: 100%;\r\n  height: auto;\r\n  border-radius: 10px;\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;;AAmBA,OAAAA,EAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,eAAA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;EACA;EACAC,OAAA;IACAD,iBAAA;MACA,KAAAJ,MAAA,GAAAH,EAAA;QACAS,UAAA;QACAC,eAAA;MACA;MAEA,KAAAP,MAAA,CAAAQ,EAAA;QACAC,OAAA,CAAAC,GAAA;MACA;MAEA,KAAAV,MAAA,CAAAQ,EAAA,gBAAAT,IAAA;QACAU,OAAA,CAAAC,GAAA,0BAAAX,IAAA;QACA,KAAAY,iBAAA,CAAAZ,IAAA;MACA;IACA;IACAY,kBAAAZ,IAAA;MACA,KAAAG,aAAA,CAAAU,OAAA,CAAAC,IAAA;QACA,MAAAC,MAAA,GAAAC,QAAA,CAAAC,cAAA,UAAAH,IAAA;QACA,MAAAI,GAAA,GAAAH,MAAA,CAAAI,UAAA;;QAEA;QACA,MAAAC,eAAA,OAAAC,UAAA,CAAArB,IAAA,CAAAsB,KAAA;QACA,MAAAC,IAAA,OAAAC,IAAA,EAAAJ,eAAA;UAAAK,IAAA;QAAA;;QAEA;QACA,MAAAC,QAAA,GAAAC,GAAA,CAAAC,eAAA,CAAAL,IAAA;QACA,MAAAD,KAAA,OAAAO,KAAA;QACAP,KAAA,CAAAQ,MAAA;UACAZ,GAAA,CAAAa,SAAA,OAAAhB,MAAA,CAAAiB,KAAA,EAAAjB,MAAA,CAAAkB,MAAA;UACAf,GAAA,CAAAgB,SAAA,CAAAZ,KAAA,QAAAP,MAAA,CAAAiB,KAAA,EAAAjB,MAAA,CAAAkB,MAAA;UACAN,GAAA,CAAAQ,eAAA,CAAAT,QAAA;QACA;QACAJ,KAAA,CAAAc,GAAA,GAAAV,QAAA;MACA;IACA;IACAW,iBAAAC,QAAA;MACA;MACA,KAAAC,eAAA;MACA,KAAAC,gBAAA,CAAAF,QAAA;IACA;IACAE,iBAAAC,KAAA;MACAA,KAAA,CAAA5B,OAAA,CAAAC,IAAA;QACA;QACA,MAAA4B,MAAA;QACAC,KAAA,CAAAD,MAAA;UAAAE,MAAA;QAAA,GACAC,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAA7C,IAAA;UACA,KAAAE,eAAA,GAAAF,IAAA,CAAAgD,OAAA;UACAtC,OAAA,CAAAC,GAAA,CAAAX,IAAA,CAAAgD,OAAA;QACA,GACAC,KAAA,CAAAC,KAAA;UACAxC,OAAA,CAAAwC,KAAA,WAAAA,KAAA;UACA,KAAAhD,eAAA;QACA;MACA;IACA;IACAqC,gBAAA;MACA;MACA,MAAAG,MAAA;MACAC,KAAA,CAAAD,MAAA;QAAAE,MAAA;MAAA,GACAC,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAA7C,IAAA;QACA,KAAAE,eAAA,GAAAF,IAAA,CAAAgD,OAAA;QACAtC,OAAA,CAAAC,GAAA,CAAAX,IAAA,CAAAgD,OAAA;MACA,GACAC,KAAA,CAAAC,KAAA;QACAxC,OAAA,CAAAwC,KAAA,WAAAA,KAAA;QACA,KAAAhD,eAAA;MACA;IACA;EACA;EACAiD,cAAA;IACA;IACA,SAAAlD,MAAA;MACA,KAAAA,MAAA,CAAAmD,UAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}